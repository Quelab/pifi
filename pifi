#! /bin/bash
unset UPDATE_CONFIGURATION
unset START_DAEMON
unset VERBOSE

UPDATE_CONFIGURATION=0
START_DAEMON=0
VERBOSE=0
GET_WIFI_LIST=0
GET_STATE=0
RUN_ONCE=0

ScriptDirectory="$(dirname $0)"
State="Idle"
AccessPointSsid="RaspberryPi"
AccessPointPassphrase="raspberry"
AccessPointChannel="6"
AccessPointGateway="192.168.10.1"
AccessPointSubnetMask="255.255.255.0"
AccessPointSubnet="192.168.10.0"
AccessPointFirst="192.168.10.100"
AccessPointLast="192.168.10.200"
AccessPointBroadcast="192.168.10.255"
AccessPointDefaultLease="600"
AccessPointMaxLease="7200"
AccessPointDomain="local"
WiFiDriver="wext"
WiFiSsid="RaspberryPi"
WiFiPassphrase="raspberry"
WiFiTimeout="0"
WiFiList=""

print(){
  if [ $VERBOSE -eq 1 ]; then echo "$1"; fi
}

determine_driver(){
  # rtl8192cu has a broken hostap driver
  lsusb -t |grep rtl8192cu > /dev/null
  if [ $? -eq 0 ]; then
    Hostapd="rtl-hostapd"
    AccessPointDriver="rtl871xdrv"
  else
    Hostapd="hostapd"
    AccessPointDriver="nl80211"
  fi

  print "Wifi Driver being used: ${Hostapd} - (${AccessPointDriver})"
}

load_config() {
  print "loading config from $(realpath $ConfigFile)  "
  if [[ -f $ConfigFile ]]; then
    . $ConfigFile
  else
    print "Configuration File not found in $(pwd)"
  fi
}

write_config() {
  print "Updating Configuration File"
  cat << EOF > $ConfigFile
State="$State"
AccessPointDriver="$AccessPointDriver"
AccessPointSsid="$AccessPointSsid"
AccessPointPassphrase="$AccessPointPassphrase"
AccessPointChannel="$AccessPointChannel"
AccessPointGateway="$AccessPointGateway"
AccessPointSubnetMask="$AccessPointSubnetMask"
AccessPointSubnet="$AccessPointSubnet"
AccessPointFirst="$AccessPointFirst"
AccessPointLast="$AccessPointLast"
AccessPointBroadcast="$AccessPointBroadcast"
AccessPointDefaultLease="$AccessPointDefaultLease"
AccessPointMaxLease="$AccessPointMaxLease"
AccessPointDomain="$AccessPointDomain"
WiFiDriver="$WiFiDriver"
WiFiSsid="$WiFiSsid"
WiFiPassphrase="$WiFiPassphrase"
WiFiTimeout="$WiFiTimeout"
WiFiList="$WiFiList"
EOF
}

write_hostapd_config(){
  cat << EOF > $HostapdConfigFile
interface=$Interface
driver=$AccessPointDriver
ssid=$AccessPointSsid
hw_mode=g
channel=$AccessPointChannel
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$AccessPointPassphrase
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
EOF
}

write_dhcpd_config(){
  cat << EOF > $DhcpdConfigFile
authoritative;

subnet $AccessPointSubnet netmask $AccessPointSubnetMask {
  range $AccessPointFirst $AccessPointLast;
  option broadcast-address $AccessPointBroadcast;
  option routers $AccessPointGateway;
  default-lease-time $AccessPointDefaultLease;
  max-lease-time $AccessPointMaxLease;
  option domain-name "$AccessPointDomain";
  option domain-name-servers 8.8.8.8, 8.8.4.4;
}
EOF
}

ip_address() {
  ifconfig $Interface | grep "inet " | awk '{print $2}' | cut -d':' -f2
}

disable_networking() {
  print "disabling networking"
  killall dhcpd $Hostapd wpa_supplicant dhcpcd &> /dev/null
  ifconfig $Interface down &> /dev/null
  ifconfig $Interface 0.0.0.0 up &> /dev/null
  ifconfig $Interface down &> /dev/null
}

host_ap() {
  Unassociated=$(iw dev $Interface link | grep "Not connected")
#Unassociated=$(iwconfig $Interface | grep unassociated) # ?"Not-Associated"
  IpAddress=$(ip_address)

  if [ "$Unassociated" != "Not Connected." ] && [ "$IpAddress" == "" ]; then
    print "Interface is $Unassociated with no $IpAddress"
    print "Networking Interface Not Associated"
    disable_networking
  fi

  # restart interface?
  IpAddress=$(ip_address)
  if [[ "$IpAddress" != "$AccessPointGateway" ]]; then
    ifconfig $Interface down
    ifconfig $Interface $AccessPointGateway netmask $AccessPointSubnetMask up
  fi

  # restart dhcpd?
  DhcpdPid=$(pidof dhcpd)
  if [[ "$DhcpdPid" == "" ]]; then
    print "restarting dhcpd"
    write_dhcpd_config

    dhcpd -cf $DhcpdConfigFile $Interface &> /dev/null && rm $DhcpdConfigFile
  fi

  # restart hostapd?
  HostapdPid=$(pidof $Hostapd)
  if [[ "$HostapdPid" == "" ]]; then
    print "restarting hostapd"
    write_hostapd_config
    $Hostapd -B $HostapdConfigFile &> /dev/null && rm $HostapdConfigFile
  fi

  WiFiList=$(iw dev $Interface scan ap-force | grep SSID | cut -d':' -f2 | grep -v '""' | sort | uniq | tr '\n' ',' | sed 's/"//g' | sed 's/,$/\n/g')
  write_config
}

wifi_connect() {
  Now=$(date +%s)
  IpAddress=$(ip_address)
  WpaSupplicantPid=$(pidof wpa_supplicant)
  DhcpcdPid=$(pidof dhcpcd)

  if [[ "$IpAddress" != "" ]]; then
    State="WiFi_Connected"
    write_config
  elif [[ $Now -gt $WiFiTimeout ]]; then
    State="AccessPoint"
    write_config
  elif [[ "$WpaSupplicantPid" == "" ]]; then
    wpa_passphrase "$WiFiSsid" "$WiFiPassphrase" > $WpaConfigFile
    wpa_supplicant -B -D $WiFiDriver -i $Interface -c $WpaConfigFile &> /dev/null && rm $WpaConfigFile
  elif [[ "$DhcpcdPid" == "" ]]; then
    dhcpcd -b $Interface &> /dev/null
  fi
}

wifi_reconnect() {
  IpAddress=$(ip_address)
  WpaSupplicantPid=$(pidof wpa_supplicant)
  DhcpcdPid=$(pidof dhcpcd)

  if [[ "$IpAddress" != "" ]]; then
    State="WiFi_Connected"
    write_config
  elif [[ "$WpaSupplicantPid" == "" ]]; then
    wpa_passphrase "$WiFiSsid" "$WiFiPassphrase" > $WpaConfigFile
    wpa_supplicant -B -D $WiFiDriver -i $Interface -c $WpaConfigFile &> /dev/null && rm $WpaConfigFile
  elif [[ "$DhcpcdPid" == "" ]]; then
    dhcpcd -b $Interface &> /dev/null
  fi
}

wifi_connected() {
  IpAddress=$(ip_address)
  WpaSupplicantPid=$(pidof wpa_supplicant)
  DhcpcdPid=$(pidof dhcpcd)

  if [[ "$IpAddress" == "" ]]; then
    State="WiFi_Reconnecting"
    write_config
  elif [[ "$WpaSupplicantPid" == "" ]]; then
    wpa_passphrase "$WiFiSsid" "$WiFiPassphrase" > $WpaConfigFile
    wpa_supplicant -B -D $WiFiDriver -i $Interface -c $WpaConfigFile &> /dev/null && rm $WpaConfigFile
  elif [[ "$DhcpcdPid" == "" ]]; then
    dhcpcd -b $Interface &> /dev/null
  fi
}

run_once(){
  print "in $State running once"
  case "$State" in
    "AccessPoint")
      State="AccessPoint_Hosting"
      write_config
      disable_networking
      ;;
    "WiFi")
      State="WiFi_Connecting"
      WiFiTimeout=$(date -d 'today + 1 minutes' +%s)
      write_config
      disable_networking
      ;;
    "Idle")                disable_networking;;
    "AccessPoint_Hosting") host_ap ;;
    "WiFi_Connecting")     wifi_connect;;
    "WiFi_Reconnecting")   wifi_reconnect;;
    "WiFi_Connected")      wifi_connected;;
    *) echo "Unknown state: $State" && exit 2;;
  esac
}

run_daemon() {
  print "daemon mode"
  while [ : ]; do
    load_config
    run_once
    sleep 5
  done
}

usage(){
  echo "Usage: $0 INTERFACE [-d | -i | -a | -w | -s]"
}


if [ "$#" == "0" ]; then
  usage
  exit 1
else
  Interface="$1"
  if ! [[ $Interface =~ ^wlan[0-9]+$ ]] ; then echo "${Interface} is invalid" && exit 2; fi
  shift
fi

ConfigFile="./pifi-$Interface.conf"
load_config

while getopts "a:w:isld:vo" opt; do
  case $opt in
    a)
      State="AccessPoint"
      AccessPointSsid="$OPTARG"
      AccessPointPassphrase="$3"
      UPDATE_CONFIGURATION=1
      ;;
    w)
      State="WiFi"
      WiFiSsid="$OPTARG"
      WiFiPassphrase="$3"
      UPDATE_CONFIGURATION=1
      ;;
    i)
      State="Idle"
      UPDATE_CONFIGURATION=1
      ;;
    d) cd "$OPTARG"; START_DAEMON=1 ;;
    o) RUN_ONCE=1 ;;
    s) GET_STATE=1 ;;
    l) GET_WIFI_LIST=1 ;;
    v) VERBOSE=1 ;;
  esac
done

DhcpdConfigFile="./pifi-$Interface-dhcpd.conf"
HostapdConfigFile="./pifi-$Interface-hostapd.conf"
WpaConfigFile="./pifi-$Interface-wpa.conf"

determine_driver
if [ $GET_WIFI_LIST -eq 1 ]; then echo "$WiFiList"; fi
if [ $GET_STATE -eq 1 ]; then echo "$State"; fi
if [ $OPTIND -eq 1 -o $RUN_ONCE -eq 1 ]; then run_once; fi
if [ $UPDATE_CONFIGURATION -eq 1 ]; then write_config; fi
if [ $START_DAEMON -eq 1 ]; then run_daemon; fi
